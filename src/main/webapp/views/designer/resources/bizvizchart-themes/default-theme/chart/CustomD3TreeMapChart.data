{
	"CustomChart": {
		"Properties": {
			"Object": {
				"componentType": "custom_chart",
				"objectType": "chart",
				"subElement": "Chart",
				"themeType": "default-theme",
				"globalVariableKeyAttribute": "Globalkey",
				"isDataSetAvailable": "true",
				"enableScript": "true",
				"referenceID": "",
				"isValueFieldsAvailable": "false",
				"showContextMenu": "false",
				"shortName": "custom",
				"showLocked": "false",
				"objectName": "Custom_1",
				"unShowHidden": "false",
				"groupings": "",
				"percentheight": "320",
				"width": "643",
				"x": "20",
				"height": "536",
				"y": "10",
				"initialVisibility": "true",
				"percentwidth": "450",
				"objectID": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
				"Chart": {
					"id": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
					"Type": "CustomChart",
					"showGradient": "false",
					"bgGradients": "#f8f8f8",
					"bgAlpha": "1",
					"bgGradientRotation": "0",
					"exportToExcel": "true",
					"exportToCSV": "true",
					"exportToJPEG": "true",
					"exportToPNG": "true",
					"exportToPDF": "true",
					"exportToPPT": "true",
					"exportToPrint": "true",
					"showScreenShotButton": "true",
					"screenShotMode": "ppt",
					"pptServiceURL": "http://bdbizviz.com/PPT/Parser",
					"pptHeading": "Heading",
					"pptSubHeading": "Sub Heading",
					"subHeading": "Sub Heading",
					"scrnShotFileName": "exportDashboard",
					"showTooltip": "true",
					"tooltipBackgroundColor": "#FFFFFF",
					"tooltipBackgroundTransparency": "1",
					"tooltipBorderColor": "#E0DFDF",
					"customTooltipWidth": "auto",
					"tooltipPrecision": "default",
					"tooltipHighlighter": "true",
					"showMaximizeButton": "true",
					"showExcelDownload": "true",
					"showSubTitle": "false",
					"showTitle": "true",
					"GradientColor": "#F5F5F5,#F5F5F5",
					"showLegends": "false",
					"hideLegendOnStart": "true",
					"legendDirection": "horizontal",
					"legendfontSize": "10",
					"legendtextDecoration": "none",
					"legendfontStyle": "normal",
					"legendfontColor": "#000000",
					"legendfontFamily": "BizvizFont",
					"legendfontWeight": "normal",
					"legendbackgroundColor": "#ffffff",
					"legendbackgroundTransparency": "1",
					"showcheckboxwithlegend": "false",
					"showCheckboxSeprate": "false",
					"showBorder": "true",
					"borderColor": "#cccccc",
					"borderRadius": "5",
					"borderThickness": "1",
					"showShadow": "false",
					"shadowColor": "#cccccc",
					"shadowOpacity": "0.3",
					"markerColor": "#F5F5F5",
					"markerTransparency": "0.3",
					"showMarkerLine": true,
					"showVerticalMarkerLine": "false",
					"autoaxisSetup": "true",
					"minimumAxisValue": "-20",
					"maximumAxisValue": "110",
					"baseZero": "true",
					"zeroMarkerLine": "false",
					"zeroMarkerColor": "#be4a47",
					"FixedLabel": "false",
					"Formater": "Currency",
					"Unit": "none",
					"SignPosition": "prefix",
					"Precision": "default",
					"NumberFormatter": "none",
					"SecondaryFormater": "Number",
					"SecondaryUnit": "none",
					"Globalkey": "",
					"enableColorFromDrill": "false",
					"ChartType": "clustered",
					"ChartBase": "plane",
					"barWidth": "70",
					"JSPaths": [{
						"name": "",
						"src": "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
					}, {
						"name": "",
						"src": "https://d3js.org/d3.v4.min.js"
					}, {
						"name": "",
						"src": "//bl.ocks.org/ricardo-marino/raw/d016daad162a8a84f19aee927dd01373/cf061abb97c9e4fdecd5b8d75da052e82f26c885/d3-tip.js"
					}],
					"CSSPaths": [],
					"JSContent": "var data = [\n  {\n    \"1\": 37163920,\n    \"2\": 538876840,\n    \"3\": 1282155240,\n    \"estado\": \"SP\"\n  },\n  {\n    \"1\": 3091021.33333333,\n    \"2\": 249721986.666667,\n    \"3\": 418182649.333333,\n    \"estado\": \"RJ\"\n  },\n  {\n    \"1\": 82661440,\n    \"2\": 123992160,\n    \"3\": 309980400,\n    \"estado\": \"MG\"\n  },\n  {\n    \"1\": 28507318.6813187,\n    \"2\": 68810769.2307692,\n    \"3\": 144502615.384615,\n    \"estado\": \"RS\"\n  },\n  {\n    \"1\": 41603665.3386454,\n    \"2\": 104009163.346614,\n    \"3\": 202471171.314741,\n    \"estado\": \"PR\"\n  },\n  {\n    \"1\": 18539082.8025478,\n    \"2\": 86515719.7452229,\n    \"3\": 137498197.452229,\n    \"estado\": \"SC\"\n  },\n  {\n    \"1\": 23064790,\n    \"2\": 93378810,\n    \"3\": 107486400,\n    \"estado\": \"BA\"\n  },\n  {\n    \"1\": 0,\n    \"2\": 23786987.9518072,\n    \"3\": 173645012.048193,\n    \"estado\": \"DF\"\n  },\n  {\n    \"1\": 6672817.20430108,\n    \"2\": 43373311.827957,\n    \"3\": 105096870.967742,\n    \"estado\": \"PE\"\n  },\n  {\n    \"1\": 4711609.75609756,\n    \"2\": 61250926.8292683,\n    \"3\": 62821463.4146342,\n    \"estado\": \"ES\"\n  },\n  {\n    \"1\": 8633835.61643836,\n    \"2\": 32808575.3424658,\n    \"3\": 84611589.0410959,\n    \"estado\": \"CE\"\n  },\n  {\n    \"1\": 20764166.6666667,\n    \"2\": 51218277.7777778,\n    \"3\": 52602555.5555556,\n    \"estado\": \"PA\"\n  },\n  {\n    \"1\": 28034307.6923077,\n    \"2\": 21804461.5384615,\n    \"3\": 51396230.7692308,\n    \"estado\": \"MT\"\n  },\n  {\n    \"1\": 7738303.57142857,\n    \"2\": 38691517.8571429,\n    \"3\": 40239178.5714286,\n    \"estado\": \"AM\"\n  },\n  {\n    \"1\": 17369000,\n    \"2\": 22106000,\n    \"3\": 39475000,\n    \"estado\": \"MS\"\n  },\n  {\n    \"1\": 14292612,\n    \"2\": 13754718,\n    \"3\": 48794670,\n    \"estado\": \"MA\"\n  },\n  {\n    \"1\": 1637060.60606061,\n    \"2\": 18007666.6666667,\n    \"3\": 34378272.7272727,\n    \"estado\": \"RN\"\n  },\n  {\n    \"1\": 4072000,\n    \"2\": 14252000,\n    \"3\": 34612000,\n    \"estado\": \"PB\"\n  },\n  {\n    \"1\": 6556000,\n    \"2\": 9834000,\n    \"3\": 24585000,\n    \"estado\": \"AL\"\n  },\n  {\n    \"1\": 4191444.44444444,\n    \"2\": 6287166.66666667,\n    \"3\": 27244388.8888889,\n    \"estado\": \"PI\"\n  },\n  {\n    \"1\": 3258434.7826087,\n    \"2\": 13033739.1304348,\n    \"3\": 21179826.0869565,\n    \"estado\": \"SE\"\n  },\n  {\n    \"1\": 5373315.78947368,\n    \"2\": 8955526.31578947,\n    \"3\": 19702157.8947368,\n    \"estado\": \"RO\"\n  },\n  {\n    \"1\": 5237800,\n    \"2\": 6983733.33333333,\n    \"3\": 13967466.6666667,\n    \"estado\": \"TO\"\n  },\n  {\n    \"1\": 2243166.66666667,\n    \"2\": 2243166.66666667,\n    \"3\": 8972666.66666667,\n    \"estado\": \"AC\"\n  },\n  {\n    \"1\": 0,\n    \"2\": 3828571.42857143,\n    \"3\": 9571428.57142857,\n    \"estado\": \"AP\"\n  },\n  {\n    \"1\": 0,\n    \"2\": 2436000,\n    \"3\": 7308000,\n    \"estado\": \"RR\"\n  }\n];\n function getDataAndDraw(data){\n\n    console.log(data);\n    var input = {'dataElem': formatJsonElements(data),\n                 'dataClus': formatJsonClusters(data),\n                 'width': bizvizchart.getWidth(), 'height': bizvizchart.getHeight()},\n        canvas = setUpSvgCanvas(input);\n    console.log(input.dataElem);\n    drawRects(input, canvas);\n\n};\n\n\nfunction drawRects(input, canvas) {\n\n    var params = {'input': input, 'canvas': canvas};\n    initialize(params);\n\n}\n\nfunction initialize(params){\n\n\n    // unpacking params\n    var canvas = params.canvas,\n        input = params.input;\n\n    // unpacking canvas\n    var svg = canvas.svg,\n        width = params.width = canvas.width,\n        height = params.height = canvas.height;\n\n    // transitions duration\n    params.transClusterDuration = 1000;\n    params.transZoomDuration = 500;\n\n    // value format\n    var format = params.format = d3.formatPrefix(\",.0\", 1e6);\n\n    // setting up colors\n    var color = params.color = d3.scaleOrdinal()\n        .range(['#3E4095', '#FFCC29', '#00A859']);\n\n    // setting up treemap\n    var treemap = params.treemap = d3.treemap()\n        .size([width, height])\n        .padding(1.2)\n        .round(true);\n\n    // unpacking data correctly formatted for element view and cluster view\n    var dataElem = params.input.dataElem,\n        dataClus = params.input.dataClus;\n\n    // setting up hierarchy for both views\n    var rootElem = params.rootElem = d3.hierarchy(dataElem)\n        .sum(function(d) { return d.value; })\n        .sort(function(a, b) { return b.height - a.height || b.value - a.value; });\n\n    var rootClus = params.rootClus = d3.hierarchy(dataClus)\n        .sum(function(d) { return d.value; })\n        .sort(function(a, b) { return b.height - a.height || b.value - a.value; });\n\n\n    var treeElem = params.treeElem = treemap(rootElem),\n        treeClus = params.treeClus = treemap(rootClus);\n\n    // setting up tip\n    var tip = params.tip = d3.tip()\n      .attr('class', 'tooltip')\n      .offset(function(d){\n        return [d.parent.y0 - d.y0 + 7, -(d.x0 + d.x1)/2 + d.parent.x0 - 4 + (d.parent.x1 - d.parent.x0)/2];})\n      .html(function(d) {\n        var tip = \"<div>\" + d.parent.data.name + \"</div>\";\n        d.parent.children.forEach(function(e){\n            if(e.data.value > 0){\n                tip += '<div> <span style=\"color:' + color(e.data.name) + '\">' + e.data.name + ': ' + format(e.data.value) +  \"</span></div>\";\n            }\n        })\n        return tip;\n      })\n\n    svg.call(tip);\n\n\n    // both cluster view and zoom view are not the default views\n    params.viewCluster = false;\n    params.viewZoom = false;\n\n\n    // building vector with element names, the \"before-last\" layer\n    // will be important for the drowdown menu\n    var elemNames = []\n    rootElem.children.forEach(function(d){ if(d.children){elemNames = elemNames.concat(d.children);}});\n\n\n    // creating group for individual blocks, each describing the cluster of an element\n    var g = params.g = svg\n        .selectAll(\"g\")\n        .data(rootElem.leaves())\n        .enter()\n        .append('g');\n\n    // creating rectangles\n    g.append('rect')\n        .attr(\"class\", \"rect\")\n        .attr('x', function(d) { return d.x0;})\n        .attr('y', function(d) { return d.y0;})\n        .attr(\"height\", function(d) { return d.y1 - d.y0;})\n        .attr(\"width\", function(d) { return d.x1 - d.x0;})\n        .style('opacity', 0.9)\n        .attr('stroke', 'black')\n        .attr('stroke-width', '0px')\n        .attr('fill', function(d){return d.value > 0 ? color(d.data.name) : 'transparent';})\n        .on('mouseover', function(d){\n            g.selectAll('.rect').filter(function(e){\n                return e.parent.data.name == d.parent.data.name;\n            }).style('opacity', 1);\n            tip.show(d);    \n        })\n        .on('mouseout', function(d){\n            g.selectAll('.rect').filter(function(e){\n                return e.parent.data.name == d.parent.data.name;\n            }).style('opacity', 0.9);\n            tip.hide(d);  \n        })\n        .on('click', function(d){ \n            params.viewZoom ? dezoom(params) : zoom(d, params);\n            tip.hide(d);\n        });\n\n    // creating text with element names\n    // using foreignobject to insert a pure html element into svg\n    g.append('foreignObject')\n        .attr(\"class\", \"text\")\n        .attr('x', function(d) { return d.parent.x0 + 5;})\n        .attr('y', function(d) { return d.parent.y0 + 2;})\n        .attr(\"height\", function(d) { return d.parent.y1 - d.parent.y0;})\n        .attr(\"width\", function(d) { return d.parent.x1 - d.parent.x0;})\n        .attr('color', 'white')\n        .attr('pointer-events', 'none')\n        .html(function(d){\n            var elemNameText = ' ';\n            if(d.value > 0){\n                elemNameText = '<div style=\"width:' + (d.parent.x1 - d.parent.x0).toString() + ';\">' + d.parent.data.name.substring(d.parent.data.name.lastIndexOf(\".\") + 1).split(/(?=[A-Z][^A-Z])/g).join(\"\\n\") + '</div>';\n            }\n            return elemNameText;\n        });\n\n\n    // create drowdown menu\n    var select = d3.select(\"body\")\n    .append(\"div\")\n    .append(\"select\")\n      .on(\"change\", onchange)\n\n    // what happens when dropdown menu is changed?\n    function onchange() {\n        selectedValue = d3.select('select').property('value');\n        params.g.selectAll('.rect').filter(function(d){\n            if(params.viewCluster){\n                return d.data.name == selectedValue;\n            }\n            else{\n                return d.parent.data.name == selectedValue;\n            }})\n            .transition()\n            .duration(params.transZoomDuration)\n            .style('opacity', 1)\n            .transition()\n            .duration(params.transZoomDuration)\n            .style('opacity', 0.4)\n            .transition()\n            .duration(params.transZoomDuration)\n            .style('opacity', 1)\n            .transition()\n            .duration(params.transZoomDuration)\n            .style('opacity', 0.9);\n\n    };\n    // appending data to dropdown menu\n    select.selectAll(\"option\")\n      .data(elemNames.sort(function(x,y){return d3.ascending(x.data.name, y.data.name)}))\n    .enter().append(\"option\")\n      .attr(\"selectedValue\", function(d) { return d.data.name; })\n      .text(function(d) { return d.data.name; });\n\n\n    // initialize checkbox options\n    d3.select(\"#myCheckbox\").on(\"change\",function(){update(params);});\n\n}\n\n// update alternates between element and cluster view\nfunction update(params){\n    if(params.viewCluster){\n        updateInElements(params);\n    }\n    else{\n        updateInClusters(params);\n    }\n}\n\n\n\nfunction zoom(elem, params){\n\n\n    var selected = params.g.selectAll('.rect').filter(function(d){\n        return d.parent.data.name == elem.parent.data.name;\n    });\n    selected\n        .transition()\n        .duration(params.transZoomDuration)\n        .attr('x', function(d){ return (d.x0 - d.parent.x0) * params.width / (d.parent.x1 - d.parent.x0);})\n        .attr('y', function(d){ return (d.y0 - d.parent.y0) * params.height / (d.parent.y1 - d.parent.y0);})\n        .attr('height', function(d){ return (d.y1 - d.y0) * params.height / (d.parent.y1 - d.parent.y0);})\n        .attr('width', function(d){ return (d.x1 - d.x0) * params.width / (d.parent.x1 - d.parent.x0);})\n\n    // selecting other rectangles, the ones that will colapse on zooming\n    var otherRects = params.g.selectAll('.rect').filter(function(d){\n            return d.parent.data.name != elem.parent.data.name;})\n\n    // geometric variables to create zoom animation\n    // other Rects should move away radially from source\n    var centerElem = [(elem.x0 + elem.x1)/2, (elem.y0 + elem.y1)/2],\n        diag = Math.sqrt(params.height * params.height + params.width * params.width);\n\n    otherRects\n        .transition()\n        .duration(params.transZoomDuration)\n        .attr('x', function(d){\n            var centerRect = [(d.x0 + d.x1)/2, (d.y0 + d.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = 0.7 * Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.x0 + diag * dist[0]/ distDiag;\n        })\n        .attr('y', function(d){\n            var centerRect = [(d.x0 + d.x1)/2, (d.y0 + d.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.y0 + diag * dist[1]/ distDiag;\n        })\n\n    if(params.viewCluster){\n        params.g.selectAll('.text').filter(function(d){\n            return d.parent.data.name == elem.parent.data.name;\n        })\n            .transition()\n            .duration(params.transZoomDuration)\n            .attr('x', function(d){ return (d.x0 - d.parent.x0) * params.width / (d.parent.x1 - d.parent.x0);})\n            .attr('y', function(d){ return (d.y0 - d.parent.y0) * params.height / (d.parent.y1 - d.parent.y0);})\n    }\n    else{\n        params.g.selectAll('.text').filter(function(d){\n            return d.parent.data.name == elem.parent.data.name;\n        })\n            .transition()\n            .duration(params.transZoomDuration)\n            .attr('x', 30)\n            .attr('y', 30)\n    }\n\n\n    if(params.viewCluster){\n        params.g.selectAll('.text').filter(function(d){\n        return d.parent.data.name != elem.parent.data.name;\n        })\n        .transition()\n        .duration(params.transZoomDuration)\n        .attr('x', function(d){\n            var centerRect = [(d.x0 + d.x1)/2, (d.y0 + d.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.x0 + diag * dist[0]/ distDiag;\n        })\n        .attr('y', function(d){\n            var centerRect = [(d.x0 + d.x1)/2, (d.y0 + d.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.y0 + diag * dist[1]/ distDiag;\n        })\n    }\n    else{\n        params.g.selectAll('.text').filter(function(d){\n        return d.parent.data.name != elem.parent.data.name;\n        })\n        .transition()\n        .duration(params.transZoomDuration)\n        .attr('x', function(d){\n            var centerRect = [(d.parent.x0 + d.parent.x1)/2, (d.parent.y0 + d.parent.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.parent.x0 + diag * dist[0]/ distDiag;\n        })\n        .attr('y', function(d){\n            var centerRect = [(d.parent.x0 + d.parent.x1)/2, (d.parent.y0 + d.parent.y1)/2],\n                dist = [centerRect[0] - centerElem[0], centerRect[1] - centerElem[1]],\n                distDiag = Math.sqrt(dist[0] * dist[0] + dist[1] * dist[1]);\n            return d.parent.y0 + diag * dist[1]/ distDiag;\n        })\n    }\n    \n\n    params.viewZoom = true;\n}\n\n\nfunction dezoom(params){\n    params.g.selectAll('.rect')\n        .transition()\n        .duration(params.transZoomDuration)\n        .attr('x', function(d) { return d.x0;})\n        .attr('y', function(d) { return d.y0;})\n        .attr(\"height\", function(d) { return d.y1 - d.y0;})\n        .attr(\"width\", function(d) { return d.x1 - d.x0;})\n\n    if(params.viewCluster){\n        params.g.selectAll('.text')\n            .transition()\n            .duration(params.transZoomDuration)\n            .attr('x', function(d) { return d.x0;})\n            .attr('y', function(d) { return d.y0;})\n    }\n    else{\n        params.g.selectAll('.text')\n            .transition()\n            .duration(params.transZoomDuration)\n            .attr('x', function(d) { return d.parent.x0 + 5;})\n            .attr('y', function(d) { return d.parent.y0 + 2;})\n    }\n    \n\n\n    params.viewZoom = false;\n}\n\n\n// converting view to Element view\n// pretty much the same thing as initialize\nfunction updateInElements(params){\n\n    params.viewCluster = false;\n\n\n    var treemap = params.treemap,\n        rootElem = params.rootElem,\n        svg = params.canvas.svg,\n        color = params.color,\n        g = params.g;\n\n\n    var tip = params.tip\n      .offset(function(d){\n        return [d.parent.y0 - d.y0 + 7, -(d.x0 + d.x1)/2 + d.parent.x0 - 4 + (d.parent.x1 - d.parent.x0)/2];})\n      .html(function(d) {\n        var tipText = \"<div>\" + d.parent.data.name + \"</div>\";\n        d.parent.children.forEach(function(e){\n            if(e.data.value > 0){\n                tipText += '<div> <span style=\"color:' + color(e.data.name) + '\">' + e.data.name + ': ' + params.format(e.data.value) +  \"</span></div>\";\n            }\n        })\n        return tipText;\n      })\n\n    svg.call(tip);\n\n\n\n    // updating group for individual blocks, each describing the cluster of an element\n    g.data(rootElem.leaves(), function(d){return d.data.id;})\n        .select('rect')\n        .on('mouseover', function(d){\n            g.filter(function(e){\n                return e.parent.data.name == d.parent.data.name;\n            }).select('rect').style('opacity', 1);\n            tip.show(d);    \n        })\n        .on('mouseout', function(d){\n            g.filter(function(e){\n                return e.parent.data.name == d.parent.data.name;\n            }).select('rect').style('opacity', 0.9);\n            tip.hide(d);  \n        })\n        .transition()\n        .duration(params.transClusterDuration)\n        .attr('x', function(d) { return d.x0;})\n        .attr('y', function(d) { return d.y0;})\n        .attr(\"height\", function(d) { return d.y1 - d.y0;})\n        .attr(\"width\", function(d) { return d.x1 - d.x0;})\n\n\n\n\n    // updating element name over block\n    // adding element name over block\n    g.select('.text')\n        .transition()\n        .duration(params.transClusterDuration)\n        .attr('x', function(d) { return d.parent.x0 + 5;})\n        .attr('y', function(d) { return d.parent.y0 + 2;})\n        .attr(\"height\", function(d) { return d.parent.y1 - d.parent.y0;})\n        .attr(\"width\", function(d) { return d.parent.x1 - d.parent.x0;})\n\n\n}\n\n// converting view to Cluster view\nfunction updateInClusters(params){\n    var treemap = params.treemap,\n        rootClus = params.rootClus,\n        svg = params.canvas.svg,\n        color = params.color,\n        g = params.g;\n\n\n    params.viewCluster = true;\n\n\n    var tip = params.tip\n      .offset([0,10])\n      .html(function(d) {\n        var tipText = '<div> ' + d.data.name + ': ' + params.format(d.data.value) +  '</div>';\n        return tipText;\n      })\n\n    svg.call(tip);\n\n\n    // updating group with element names\n\n    g.data(rootClus.leaves(), function(d){return d.data.id;})\n        .select('rect')\n        .on('mouseover', function(d){\n            g.filter(function(e){return e.data.name == d.data.name;}).select('rect')\n                .style('stroke', 'black')\n                .style('stroke-width', '2px')\n                .style('opacity', 0.9)\n            tip.show(d);\n        })\n        .on('mouseout', function(d){\n            tip.hide(d);\n            g.selectAll('rect').filter(function(e){return e.data.name == d.data.name;})\n                .style('stroke-width', '0px')\n                .style('opacity', 0.9);\n            })\n        .transition()\n        .duration(params.transClusterDuration)\n        .attr('x', function(d) { return d.x0;})\n        .attr('y', function(d) { return d.y0;})\n        .attr(\"height\", function(d) { return d.y1 - d.y0;})\n        .attr(\"width\", function(d) { return d.x1 - d.x0;})\n        .attr('fill', function(d){return d.value > 0 ? color(d.parent.data.name) : 'transparent';})\n\n    \n    g.select('.text')\n        .transition()\n        .duration(params.transClusterDuration)\n        .attr('x', function(d) { return d.x0;})\n        .attr('y', function(d) { return d.y0;})\n        .attr(\"height\", function(d) { return d.y1 - d.y0;})\n        .attr(\"width\", function(d) { return d.x1 - d.x0;});\n\n}\n\nfunction setUpSvgCanvas(input) {\n    // Set up the svg canvas\n    var margin = {top: 20, right: 20, bottom: 20, left: 20},\n        width = input.width - margin.left -margin.right,\n        height = input.height - margin.top -margin.bottom;\n\n    var svg = d3.select('svg')\n        .attr('width', width + margin.left + margin.right )\n        .attr('height', height + margin.top +margin.bottom )\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    return {\n        svg: svg,\n        margin: margin,\n        width: width,\n        height: height\n    };\n}\n\n// these functions will change the initial data to a more d3-hierarchy friendly form\n// I prefer torturing the original data with it rather than torturing the code to\n// accept the original data\nfunction formatJsonElements(json){\n    // first we store which is the largest cluster for this element\n    var clusterNames = d3.keys(json[0]).filter(function(key) {return key !== 'estado' && key !== 'clusterLargest'; });\n    for(var j=0; j < json.length; j++){\n        var compare = [];\n        for(var k=0; k < clusterNames.length; k++){\n            compare.push(parseFloat(json[j][clusterNames[k]]))\n        }\n        var indexLargest = compare.indexOf(d3.max(compare)),\n            clusterLargest = clusterNames[indexLargest];\n        json[j]['clusterLargest'] = clusterLargest;\n    }\n    // we proceed to create the correct hierarchy based in that\n    // HEAD -> Largest cluster -> Element -> values on clusters\n    var formattedData = [];\n    for(var i=0; i < clusterNames.length; i++){\n        formattedData.push({'name': clusterNames[i]})\n        formattedData[i]['children'] = [];\n        var l = -1\n        for(var j=0; j < json.length; j++){\n            if(json[j]['clusterLargest'] == clusterNames[i]){\n                formattedData[i]['children'].push({'name': json[j].estado})\n                l += 1;\n                formattedData[i]['children'][l]['children'] = []\n                for(var k=0; k < clusterNames.length; k++){\n                    formattedData[i]['children'][l]['children'].push({'name': clusterNames[k], 'value': parseFloat(json[j][clusterNames[k]]), 'id': json[j].estado + clusterNames[k]});\n                }\n            }\n        }\n    }\n    return {'children': formattedData};\n}\n\nfunction formatJsonClusters(json){\n    var formattedData = [];\n    var clusterNames = d3.keys(json[0]).filter(function(key) {return key !== 'estado'; });\n    for(var i=0; i < clusterNames.length; i++){\n        formattedData.push({'name': clusterNames[i]})\n    }\n    for(var i=0; i < clusterNames.length; i++){\n        formattedData[i]['children'] = [];\n        for(var j=0; j < json.length; j++){\n            formattedData[i]['children'].push({'name': json[j].estado,\n                'value': parseFloat(json[j][clusterNames[i]]), 'id': json[j].estado + clusterNames[i]});\n        }\n    }\n    return {'children': formattedData};\n}\n\n// d3.tip\n// Copyright (c) 2013 Justin Palmer\n// ES6 / D3 v4 Adaption Copyright (c) 2016 Constantin Gavrilete\n// Removal of ES6 for D3 v4 Adaption Copyright (c) 2016 David Gotz\n//\n// Tooltips for d3.js SVG visualizations\n\nd3.functor = function functor(v) {\n  return typeof v === \"function\" ? v : function() {\n    return v;\n  };\n};\n\nd3.tip = function() {\n\n  var direction = d3_tip_direction,\n      offset    = d3_tip_offset,\n      html      = d3_tip_html,\n      node      = initNode(),\n      svg       = null,\n      point     = null,\n      target    = null\n\n  function tip(vis) {\n    svg = getSVGNode(vis)\n    point = svg.createSVGPoint()\n    document.body.appendChild(node)\n  }\n\n  // Public - show the tooltip on the screen\n  //\n  // Returns a tip\n  tip.show = function() {\n    var args = Array.prototype.slice.call(arguments)\n    if(args[args.length - 1] instanceof SVGElement) target = args.pop()\n\n    var content = html.apply(this, args),\n        poffset = offset.apply(this, args),\n        dir     = direction.apply(this, args),\n        nodel   = getNodeEl(),\n        i       = directions.length,\n        coords,\n        scrollTop  = document.documentElement.scrollTop || document.body.scrollTop,\n        scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft\n\n    nodel.html(content)\n      .style('position', 'absolute')\n      .style('opacity', 1)\n      .style('pointer-events', 'all')\n\n    while(i--) nodel.classed(directions[i], false)\n    coords = direction_callbacks[dir].apply(this)\n    nodel.classed(dir, true)\n      .style('top', (coords.top +  poffset[0]) + scrollTop + 'px')\n      .style('left', (coords.left + poffset[1]) + scrollLeft + 'px')\n\n    return tip\n  }\n\n  // Public - hide the tooltip\n  //\n  // Returns a tip\n  tip.hide = function() {\n    var nodel = getNodeEl()\n    nodel\n      .style('opacity', 0)\n      .style('pointer-events', 'none')\n    return tip\n  }\n\n  // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.\n  //\n  // n - name of the attribute\n  // v - value of the attribute\n  //\n  // Returns tip or attribute value\n  tip.attr = function(n, v) {\n    if (arguments.length < 2 && typeof n === 'string') {\n      return getNodeEl().attr(n)\n    } else {\n      var args =  Array.prototype.slice.call(arguments)\n      d3.selection.prototype.attr.apply(getNodeEl(), args)\n    }\n\n    return tip\n  }\n\n  // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.\n  //\n  // n - name of the property\n  // v - value of the property\n  //\n  // Returns tip or style property value\n  tip.style = function(n, v) {\n    // debugger;\n    if (arguments.length < 2 && typeof n === 'string') {\n      return getNodeEl().style(n)\n    } else {\n      var args = Array.prototype.slice.call(arguments);\n      if (args.length === 1) {\n        var styles = args[0];\n        Object.keys(styles).forEach(function(key) {\n          return d3.selection.prototype.style.apply(getNodeEl(), [key, styles[key]]);\n        });\n      }\n    }\n\n    return tip\n  }\n\n  // Public: Set or get the direction of the tooltip\n  //\n  // v - One of n(north), s(south), e(east), or w(west), nw(northwest),\n  //     sw(southwest), ne(northeast) or se(southeast)\n  //\n  // Returns tip or direction\n  tip.direction = function(v) {\n    if (!arguments.length) return direction\n    direction = v == null ? v : d3.functor(v)\n\n    return tip\n  }\n\n  // Public: Sets or gets the offset of the tip\n  //\n  // v - Array of [x, y] offset\n  //\n  // Returns offset or\n  tip.offset = function(v) {\n    if (!arguments.length) return offset\n    offset = v == null ? v : d3.functor(v)\n\n    return tip\n  }\n\n  // Public: sets or gets the html value of the tooltip\n  //\n  // v - String value of the tip\n  //\n  // Returns html value or tip\n  tip.html = function(v) {\n    if (!arguments.length) return html\n    html = v == null ? v : d3.functor(v)\n\n    return tip\n  }\n\n  // Public: destroys the tooltip and removes it from the DOM\n  //\n  // Returns a tip\n  tip.destroy = function() {\n    if(node) {\n      getNodeEl().remove();\n      node = null;\n    }\n    return tip;\n  }\n\n  function d3_tip_direction() { return 'n' }\n  function d3_tip_offset() { return [0, 0] }\n  function d3_tip_html() { return ' ' }\n\n  var direction_callbacks = {\n    n:  direction_n,\n    s:  direction_s,\n    e:  direction_e,\n    w:  direction_w,\n    nw: direction_nw,\n    ne: direction_ne,\n    sw: direction_sw,\n    se: direction_se\n  };\n\n  var directions = Object.keys(direction_callbacks);\n\n  function direction_n() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.n.y - node.offsetHeight,\n      left: bbox.n.x - node.offsetWidth / 2\n    }\n  }\n\n  function direction_s() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.s.y,\n      left: bbox.s.x - node.offsetWidth / 2\n    }\n  }\n\n  function direction_e() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.e.y - node.offsetHeight / 2,\n      left: bbox.e.x\n    }\n  }\n\n  function direction_w() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.w.y - node.offsetHeight / 2,\n      left: bbox.w.x - node.offsetWidth\n    }\n  }\n\n  function direction_nw() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.nw.y - node.offsetHeight,\n      left: bbox.nw.x - node.offsetWidth\n    }\n  }\n\n  function direction_ne() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.ne.y - node.offsetHeight,\n      left: bbox.ne.x\n    }\n  }\n\n  function direction_sw() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.sw.y,\n      left: bbox.sw.x - node.offsetWidth\n    }\n  }\n\n  function direction_se() {\n    var bbox = getScreenBBox()\n    return {\n      top:  bbox.se.y,\n      left: bbox.e.x\n    }\n  }\n\n  function initNode() {\n    var node = d3.select(document.createElement('div'))\n    node\n      .style('position', 'absolute')\n      .style('top', 0)\n      .style('opacity', 0)\n      .style('pointer-events', 'none')\n      .style('box-sizing', 'border-box')\n\n    return node.node()\n  }\n\n  function getSVGNode(el) {\n    el = el.node()\n    if(el.tagName.toLowerCase() === 'svg')\n      return el\n\n    return el.ownerSVGElement\n  }\n\n  function getNodeEl() {\n    if(node === null) {\n      node = initNode();\n      // re-add node to DOM\n      document.body.appendChild(node);\n    };\n    return d3.select(node);\n  }\n\n  // Private - gets the screen coordinates of a shape\n  //\n  // Given a shape on the screen, will return an SVGPoint for the directions\n  // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),\n  // sw(southwest).\n  //\n  //    +-+-+\n  //    |   |\n  //    +   +\n  //    |   |\n  //    +-+-+\n  //\n  // Returns an Object {n, s, e, w, nw, sw, ne, se}\n  function getScreenBBox() {\n    var targetel   = target || d3.event.target;\n\n    while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {\n        targetel = targetel.parentNode;\n    }\n\n    var bbox       = {},\n        matrix     = targetel.getScreenCTM(),\n        tbbox      = targetel.getBBox(),\n        width      = tbbox.width,\n        height     = tbbox.height,\n        x          = tbbox.x,\n        y          = tbbox.y\n\n    point.x = x\n    point.y = y\n    bbox.nw = point.matrixTransform(matrix)\n    point.x += width\n    bbox.ne = point.matrixTransform(matrix)\n    point.y += height\n    bbox.se = point.matrixTransform(matrix)\n    point.x -= width\n    bbox.sw = point.matrixTransform(matrix)\n    point.y -= height / 2\n    bbox.w  = point.matrixTransform(matrix)\n    point.x += width\n    bbox.e = point.matrixTransform(matrix)\n    point.x -= width / 2\n    point.y -= height / 2\n    bbox.n = point.matrixTransform(matrix)\n    point.y += height\n    bbox.s = point.matrixTransform(matrix)\n\n    return bbox\n  }\n\n  return tip\n};\n\n\ngetDataAndDraw(data);",
					"CSSContent": "body {\n  font: 10px sans-serif;\n  position: relative;\n}\n\n.node {\n  box-sizing: border-box;\n  position: absolute;\n  overflow: hidden;\n}\n\n.node-label {\n  padding: 4px;\n  line-height: 1em;\n  white-space: pre;\n}\n\n.node-value {\n  color: rgba(0,0,0,0.9);\n  font-size: 9px;\n  margin-top: 1px;\n}\n\n.tooltip  {\n  line-height: 1;\n  font-weight: bold;\n  padding: 12px;\n  background: rgba(0, 0, 0, 0.9);\n  color: #fff;\n  border-radius: 2px;\n  pointer-events:none !important;\n}\n\n/* Creates a small triangle extender for the tooltip */\n.tooltip:after {\n  box-sizing: border-box;\n  display: inline;\n  font-size: 10px;\n  width: 100%;\n  line-height: 1;\n  color: rgba(0, 0, 0, 0.9);\n  content: \"\\25BC\";\n  position: absolute;\n  text-align: center;\n}\n\n.rect {\n    opacity: 0.9;\n}\n\n/* Style northward tooltips differently */\n.tooltip.n:after {\n  margin: -1px 0 0 0;\n  top: 100%;\n  left: 0;\n}",
					"HTMLContent": "<svg id=\"treemap\" width=\"960\" height=\"500\"></svg>\n<p> <input type=\"checkbox\" id=\"myCheckbox\">  Switch to cluster view </p>",
					"Title": {
						"FontWeight": "600",
						"Description": "Tree Map Chart",
						"FontSize": "17",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#000000",
						"FontStyle": "normal",
						"showTitle": "true",
						"TitleBarHeight": "40"
					},
					"SubTitle": {
						"FontWeight": "normal",
						"Description": "SubTitle",
						"showSubTitle": "false",
						"FontSize": "15",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#808080",
						"FontStyle": "normal"
					}
				}
			}
		},
		"Fields": [{
				"DisplayName": "Year",
				"Type": "Category",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Year",
				"Color": "#fcdb96",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none"
			},
			{
				"DisplayName": "Expense",
				"Type": "Series",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Expense",
				"Color": "#fd940b",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none",
				"DataLabelCustomProperties": {
					"showDataLabel": "false",
					"useFieldColor": "false",
					"dataLabelTextAlign": "center",
					"dataLabelFontColor": "#000000",
					"dataLabelRotation": "0",
					"dataLabelFontSize": "14",
					"datalabelFontStyle": "normal",
					"datalabelFontWeight": "normal",
					"datalabelFontFamily": "BizvizFont",
					"datalabelField": "",
					"datalabelPosition": "Top",
					"dataLabelUseComponentFormater": "true",
					"datalabelFormaterUnit": "none",
					"datalabelFormaterPrecision": "default",
					"datalabelFormaterCurrency": "none",
					"datalabelFormaterPosition": "suffix"
				}
			}
		],
		"Data": [{
				"Year": 2016,
				"Expense": 14,
				"Revenue": 22,
				"Profit": 15
			},
			{
				"Year": 2017,
				"Expense": 28,
				"Revenue": 43,
				"Profit": 8
			},
			{
				"Year": 2018,
				"Expense": 31,
				"Revenue": 12,
				"Profit": 4
			}
		]
	}
}