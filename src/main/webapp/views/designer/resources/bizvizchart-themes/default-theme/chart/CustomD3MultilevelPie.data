{
	"CustomChart": {
		"Properties": {
			"Object": {
				"componentType": "custom_chart",
				"objectType": "chart",
				"subElement": "Chart",
				"themeType": "default-theme",
				"globalVariableKeyAttribute": "Globalkey",
				"isDataSetAvailable": "true",
				"enableScript": "true",
				"referenceID": "",
				"isValueFieldsAvailable": "false",
				"showContextMenu": "false",
				"shortName": "custom",
				"showLocked": "false",
				"objectName": "Custom_1",
				"unShowHidden": "false",
				"groupings": "",
				"percentheight": "320",
				"width": "643",
				"x": "20",
				"height": "536",
				"y": "10",
				"initialVisibility": "true",
				"percentwidth": "450",
				"objectID": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
				"Chart": {
					"id": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
					"Type": "CustomChart",
					"showGradient": "false",
					"bgGradients": "#f8f8f8",
					"bgAlpha": "1",
					"bgGradientRotation": "0",
					"exportToExcel": "true",
					"exportToCSV": "true",
					"exportToJPEG": "true",
					"exportToPNG": "true",
					"exportToPDF": "true",
					"exportToPPT": "true",
					"exportToPrint": "true",
					"showScreenShotButton": "true",
					"screenShotMode": "ppt",
					"pptServiceURL": "http://bdbizviz.com/PPT/Parser",
					"pptHeading": "Heading",
					"pptSubHeading": "Sub Heading",
					"subHeading": "Sub Heading",
					"scrnShotFileName": "exportDashboard",
					"showTooltip": "true",
					"tooltipBackgroundColor": "#FFFFFF",
					"tooltipBackgroundTransparency": "1",
					"tooltipBorderColor": "#E0DFDF",
					"customTooltipWidth": "auto",
					"tooltipPrecision": "default",
					"tooltipHighlighter": "true",
					"showMaximizeButton": "true",
					"showExcelDownload": "true",
					"showSubTitle": "false",
					"showTitle": "true",
					"GradientColor": "#F5F5F5,#F5F5F5",
					"showLegends": "false",
					"hideLegendOnStart": "true",
					"legendDirection": "horizontal",
					"legendfontSize": "10",
					"legendtextDecoration": "none",
					"legendfontStyle": "normal",
					"legendfontColor": "#000000",
					"legendfontFamily": "BizvizFont",
					"legendfontWeight": "normal",
					"legendbackgroundColor": "#ffffff",
					"legendbackgroundTransparency": "1",
					"showcheckboxwithlegend": "false",
					"showCheckboxSeprate": "false",
					"showBorder": "true",
					"borderColor": "#cccccc",
					"borderRadius": "5",
					"borderThickness": "1",
					"showShadow": "false",
					"shadowColor": "#cccccc",
					"shadowOpacity": "0.3",
					"markerColor": "#F5F5F5",
					"markerTransparency": "0.3",
					"showMarkerLine": true,
					"showVerticalMarkerLine": "false",
					"autoaxisSetup": "true",
					"minimumAxisValue": "-20",
					"maximumAxisValue": "110",
					"baseZero": "true",
					"zeroMarkerLine": "false",
					"zeroMarkerColor": "#be4a47",
					"FixedLabel": "false",
					"Formater": "Currency",
					"Unit": "none",
					"SignPosition": "prefix",
					"Precision": "default",
					"NumberFormatter": "none",
					"SecondaryFormater": "Number",
					"SecondaryUnit": "none",
					"Globalkey": "",
					"enableColorFromDrill": "false",
					"ChartType": "clustered",
					"ChartBase": "plane",
					"barWidth": "70",
					"JSPaths": [
								{
									"name": "",
									"src": "https://d3js.org/d3.v4.min.js"
								},
								{
									"name": "",
									"src": "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
								},
								{
									"name": "",
									"src": "https://cdnjs.cloudflare.com/ajax/libs/d3-legend/2.25.6/d3-legend.js"
								}
							],
					"CSSPaths": [],
					"JSContent": "var data = bizvizchart.getData()\n\nvar legendTextWidth = 80;\nvar vertical_legend = false;\n\n// d3.schemeCategory20= [];            //enable this and update required colors in array \nvar color = d3.scaleOrdinal(d3.schemeCategory20);\n\nfor (var i = 0; i < data.length; i++) {\n    data[i].Category = data[i].Category ;           // update category field name here\n    data[i].SubCat = data[i].SubCat ;            // update sub-category field name here\n    data[i].value= data[i].value;            // update value field name here\n};\nvar multiLevelData = [];\nvar queueC = [];\nvar subC = [];\n\nfor (var i = 0; i < data.length; i++) {\n    queueC.push(data[i].Category);\nsubC.push(data[i].SubCat);\n};\n\nvar uniQc = queueC.filter(function(itm, i, queueC) {\n    return i == queueC.indexOf(itm);\n});\n\n//added below variable for creating legend with sub-categroy data\nvar uniSc = subC.filter(function(itm, i, subC) {\n    return i == subC.indexOf(itm);\n});\n\nvar newL = [];\nfor (var i = 0; i < uniQc.length; i++) {\n    var obj = {};\n    obj.value = 0;\n    obj.Category = uniQc[i];\n    for (var j = 0; j < data.length; j++) {\n        if (uniQc[i] == data[j].Category && data[j].value != \"null\" && data[j].value != undefined) {\n            obj.value += data[j].value * 1;\n        }\n    }\n    newL.push(obj);\n}\nmultiLevelData.push(data);\nmultiLevelData.push(newL);\n\n\nvar width = bizvizchart.getWidth(),\n    height = bizvizchart.getHeight(),\n    maxRadius = Math.min(width, height) / 2,\n\tsvgWidth = width - (3*width/4);\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width/2 + \",\" + height / 2 + \")\");\n\n\n\nvar drawPieChart = function(_data, index, uniQc) {\n    var pie = d3.pie()\n        .sort(function(a, b) {\n            return a.Category.localeCompare(b.Category);\n        })\n        .value(function(d) {\n            return d.value;\n        });\n\n\t\tif (_data.length <= uniQc) {\t\n\t\t//added this for plotting datalables with storke lines\n         var data_ready = pie(_data);\n\t\t \n\t\t var outerArc = d3.arc()\n        .outerRadius((index + 3) * pieWidth - 1)\n        .innerRadius((index + 2) * pieWidth);\n\t\t\n      }\n    var arc = d3.arc()\n        .outerRadius((index + 2) * pieWidth - 1)\n        .innerRadius((index + 1) * pieWidth);\n\t\t\n\t\t\n\n    var g = svg.selectAll(\".arc\" + index).data(pie(_data)).enter().append(\"g\")\n        .attr(\"class\", \"arc\" + index);\n    g.append(\"path\").attr(\"d\", arc)\n        .style(\"fill\", function(d, i) {\n            if (_data.length > uniQc) {\n                return color(d.data.SubCat);\n\n            } else {\n                return color(d.data.Category);\n\n            }\n        }).style(\"opacity\", function(d) {\n            if (_data.length > uniQc) {\n                return 0.1 * d.data.value;\n            } else {\n                return 1;\n            }\n        })\n\t\t.attr(\"data-legend\",function(d) {\nif (_data.length <= uniQc){\n\t\treturn d.data.SubCat;\n\t\t}\n\t\t})\n.on(\"mousemove\", function (d, i) {        // for displaying tooltip as block\n\n\t\t\tif (_data.length > uniQc){\n\n\t\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'block')\n\t\t\t\t.html(d.data.Category + '<hr style=\"border:0.5px solid black' + '\"/>' + d.data.SubCat+ '<hr style=\"border:0.5px solid black' + '\"/>'  + d.data.value)\n\t\t\t\t.style('left', (d3.event.pageX - 34) + 'px')\n\t\t\t\t.style('top', (d3.event.pageY - 12) + 'px');\n\n}else{    \n\t\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'block')\n\t\t\t\t.html(d.data.Category + '<hr style=\"border:0.5px solid black' + '\"/>'   + d.data.value)\n\t\t\t\t.style('left', (d3.event.pageX - 34) + 'px')\n\t\t\t\t.style('top', (d3.event.pageY - 12) + 'px');\n}\n\t\t})\n\t\t.on(\"mouseout\", function(d) {\n\t\t\t\n\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'none');\n\t\t});\n\n    /*g.append(\"title\")    \n        .text(function(d) {\n            if (_data.length > uniQc) {\n                return d.data.SubCat + \" : \" + d.data.value;           // for displaying sub-category tooltip on hover\n            } else {\n                return d.data.Category + \" :  \" + d.data.value;           // for displaying category tooltip on hover\n            }\n        });*/\n\t\t\n\n\t\n    g.on(\"click\", function(d, i, e) {\n        bizvizchart.eventCallBack(event, d.data, i);\n    });\n    \n  // Enable below code to display data label on slices\n/*\ng.append(\"text\").attr(\"transform\", function(d) {\n            return \"translate(\" + arc.centroid(d) + \")\";\n        })\n        .attr(\"dy\", \".35em\").style(\"text-anchor\", \"middle\")\n        .text(function(d) {\n            if (_data.length = uniQc) {\n                return d.data.SubCat; // enable this for displaying sub-category data label\n            } else {\n                // return d.data.Category; // this is  for displaying category data label\n            }\n        });\n\n\t*/\n if (_data.length <= uniQc ) {\t\n\nif( vertical_legend == true){\n\n var legendG = svg.selectAll(\".legend\")\n      .data(uniSc)\n      .enter().append(\"g\")\n\t  .attr(\"class\",\"legend\")\n      .attr(\"transform\", function(d,i){\n        return \"translate(\" + width/3 + \",\" + (i * 20 +10) + \")\";\n      });   \n \n     legendG.append(\"rect\")\n      .attr(\"width\", 10)\n      .attr(\"height\", 10)\n      .attr(\"fill\", function(d, i) {\n\n        return color(d);\n});\n\n    legendG.append(\"text\")\n      .text(function(d){  \n        return d;\n\t\t})\n      .style(\"font-size\", 12)\n      .attr(\"y\", 10)\n      .attr(\"x\", 15);\n\n\t\n} else{\n\n var legendG = svg.selectAll(\".legend\")\n      .data(uniSc)\n      .enter().append(\"g\")\n\t  .attr(\"class\",\"legend\")\n      .attr(\"transform\", function(d,i){\n        return \"translate(\" + (-width/2 + i * legendTextWidth +20 ) + \",\" + (height/2 -20) + \")\"; // \"translate(\" + (i * legendTextWidth +20 ) + \",\" + (height/2 -20) + \")\" this if for right alignment\n      });   \n \n     legendG.append(\"rect\")\n      .attr(\"width\", 10)\n      .attr(\"height\", 10)\n      .attr(\"fill\", function(d, i) {\n\n        return color(d);\n});\n\n    legendG.append(\"text\")\n      .text(function(d){  \n        return d;\n\t\t})\n      .style(\"font-size\", 12)\n      .attr(\"y\", 10)\n      .attr(\"x\", 15);\n\n}\n\n// Below code is used to plot the poly lines and datalables \n\t\t// Add the polylines between chart and labels:\n\n    svg.selectAll('allPolylines'+ index)\n    .data(data_ready)\n    .enter()\n    .append('polyline')\n    .attr(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .attr(\"stroke-width\", 1)\n    .attr('points', function(d) {\n        var posA = arc.centroid(d);             // line insertion in the slice\n        var posB = outerArc.centroid(d);            // line break: we use the other arc generator that has been built only for that\n        var posC = outerArc.centroid(d);            // Label position = almost the same as posB\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;            // we need the angle to see if the X position will be at the extreme right or extreme left\n\t\t//posC[0] =( ((maxRadius * 0.5) > Math.abs(posB[0])) ? (maxRadius * 0.5) : Math.abs(posB[0]) ) * (midangle < Math.PI ? 1 : -1);\n        posC[0] = maxRadius * 0.95 * (midangle < Math.PI ? 1 : -1);            // multiply by 1 or -1 to put it on the right or on the left\n        return [posA, posB, posC];\n    })\n\n// Add the polylines between chart and labels:\n\n    svg.selectAll('allLabels'+ index)\n    .data(data_ready)\n    .enter()\n    .append('text')\n    .text(function(d) {\n        console.log(d.data.Category);\n        return d.data.Category\n    })\n    .attr('transform', function(d) {\n        var pos = outerArc.centroid(d);\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n//pos[0] = maxRadius  * 0.79 * (midangle < Math.PI ? 1 : -1);\n        pos[0] = maxRadius  * 0.99 * (midangle < Math.PI ? 1 : -1);\n        return 'translate(' + pos + ')';\n    })\n    .style('text-anchor', function(d) {\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n        return (midangle < Math.PI ? 'start' : 'end')\n    })\n\t.style('font-family', '\"Times New Roman\", Times, serif')\n\t.style('font-size', '15px')\n   }\n}\n\nvar pieWidth = (parseInt(maxRadius / multiLevelData.length) - multiLevelData.length) / 2;\n\nfor (var i = 0; i < multiLevelData.length; i++) {\n    var _cData = multiLevelData[i];\n    drawPieChart(_cData, i, uniQc.length);\n}",
					"CSSContent": "body {\n  font: 10px sans-serif;\n}\n\n.arc path {\n  stroke: #fff;\n}\n\n.legend rect {\n  stroke:black;}\n\n\n  .tooltip{\ndisplay: none;\n      position      : absolute;\n      text-align    : center;\n      max-width     : 300px;\n      max-height    : 200px;\n      padding       : 8px;\n      border        : 1px solid #dddddd;\n      border-radius : 0px;\n      margin-top    : 30px;\n      font-size          : 12px;\n      background    : #FFFFFF;\n      color         : #000000;\n      pointer-events: none;\n  }",
					"HTMLContent": "<div class='tooltip'></div>",
					"Title": {
						"FontWeight": "600",
						"Description": "Multilevel Pie",
						"FontSize": "17",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#000000",
						"FontStyle": "normal",
						"showTitle": "true",
						"TitleBarHeight": "40"
					},
					"SubTitle": {
						"FontWeight": "normal",
						"Description": "SubTitle",
						"showSubTitle": "false",
						"FontSize": "15",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#808080",
						"FontStyle": "normal"
					}
				}
			}
		},
		"Fields": [{
				"DisplayName": "Year",
				"Type": "Category",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Year",
				"Color": "#fcdb96",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none"
			},
			{
				"DisplayName": "Expense",
				"Type": "Series",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Expense",
				"Color": "#fd940b",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none",
				"DataLabelCustomProperties": {
					"showDataLabel": "false",
					"useFieldColor": "false",
					"dataLabelTextAlign": "center",
					"dataLabelFontColor": "#000000",
					"dataLabelRotation": "0",
					"dataLabelFontSize": "14",
					"datalabelFontStyle": "normal",
					"datalabelFontWeight": "normal",
					"datalabelFontFamily": "BizvizFont",
					"datalabelField": "",
					"datalabelPosition": "Top",
					"dataLabelUseComponentFormater": "true",
					"datalabelFormaterUnit": "none",
					"datalabelFormaterPrecision": "default",
					"datalabelFormaterCurrency": "none",
					"datalabelFormaterPosition": "suffix"
				}
			}
		],
		"Data": [{
				"Year": 2016,
				"Expense": 14,
				"Revenue": 22,
				"Profit": 15
			},
			{
				"Year": 2017,
				"Expense": 28,
				"Revenue": 43,
				"Profit": 8
			},
			{
				"Year": 2018,
				"Expense": 31,
				"Revenue": 12,
				"Profit": 4
			}
		]
	}
}