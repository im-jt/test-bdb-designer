{
	"CustomChart": {
		"Properties": {
			"Object": {
				"componentType": "custom_chart",
				"objectType": "chart",
				"subElement": "Chart",
				"themeType": "default-theme",
				"globalVariableKeyAttribute": "Globalkey",
				"isDataSetAvailable": "true",
				"enableScript": "true",
				"referenceID": "",
				"isValueFieldsAvailable": "false",
				"showContextMenu": "false",
				"shortName": "custom",
				"showLocked": "false",
				"objectName": "Custom_1",
				"unShowHidden": "false",
				"groupings": "",
				"percentheight": "320",
				"width": "643",
				"x": "20",
				"height": "536",
				"y": "10",
				"initialVisibility": "true",
				"percentwidth": "450",
				"objectID": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
				"Chart": {
					"id": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
					"Type": "CustomChart",
					"showGradient": "false",
					"bgGradients": "#f8f8f8",
					"bgAlpha": "1",
					"bgGradientRotation": "0",
					"exportToExcel": "true",
					"exportToCSV": "true",
					"exportToJPEG": "true",
					"exportToPNG": "true",
					"exportToPDF": "true",
					"exportToPPT": "true",
					"exportToPrint": "true",
					"showScreenShotButton": "true",
					"screenShotMode": "ppt",
					"pptServiceURL": "http://bdbizviz.com/PPT/Parser",
					"pptHeading": "Heading",
					"pptSubHeading": "Sub Heading",
					"subHeading": "Sub Heading",
					"scrnShotFileName": "exportDashboard",
					"showTooltip": "true",
					"tooltipBackgroundColor": "#FFFFFF",
					"tooltipBackgroundTransparency": "1",
					"tooltipBorderColor": "#E0DFDF",
					"customTooltipWidth": "auto",
					"tooltipPrecision": "default",
					"tooltipHighlighter": "true",
					"showMaximizeButton": "true",
					"showExcelDownload": "true",
					"showSubTitle": "false",
					"showTitle": "true",
					"GradientColor": "#F5F5F5,#F5F5F5",
					"showLegends": "false",
					"hideLegendOnStart": "true",
					"legendDirection": "horizontal",
					"legendfontSize": "10",
					"legendtextDecoration": "none",
					"legendfontStyle": "normal",
					"legendfontColor": "#000000",
					"legendfontFamily": "BizvizFont",
					"legendfontWeight": "normal",
					"legendbackgroundColor": "#ffffff",
					"legendbackgroundTransparency": "1",
					"showcheckboxwithlegend": "false",
					"showCheckboxSeprate": "false",
					"showBorder": "true",
					"borderColor": "#cccccc",
					"borderRadius": "5",
					"borderThickness": "1",
					"showShadow": "false",
					"shadowColor": "#cccccc",
					"shadowOpacity": "0.3",
					"markerColor": "#F5F5F5",
					"markerTransparency": "0.3",
					"showMarkerLine": true,
					"showVerticalMarkerLine": "false",
					"autoaxisSetup": "true",
					"minimumAxisValue": "-20",
					"maximumAxisValue": "110",
					"baseZero": "true",
					"zeroMarkerLine": "false",
					"zeroMarkerColor": "#be4a47",
					"FixedLabel": "false",
					"Formater": "Currency",
					"Unit": "none",
					"SignPosition": "prefix",
					"Precision": "default",
					"NumberFormatter": "none",
					"SecondaryFormater": "Number",
					"SecondaryUnit": "none",
					"Globalkey": "",
					"enableColorFromDrill": "false",
					"ChartType": "clustered",
					"ChartBase": "plane",
					"barWidth": "70",
					"JSPaths": [{
						"name": "",
						"src": "https://d3js.org/d3.v3.min.js"
					}, {
						"name": "",
						"src": ""
					}],
					"CSSPaths": [],
					"JSContent": "var data = bizvizchart.getData();\nvar field = {\n\t'catAxis': {\n\t\tname: 'State',\n\t\tbaseZero: true,\n\t\tfillColor: \"#000000\"\n\t},\n\t'hAxis': {\n\t\tname: 'Male',\n\t\tbaseZero: true,\n\t\tfillColor: \"#1f77b4\"\n\t},\n\t'h1Axis': {\n\t\tname: 'MalePercent',\n\t\tbaseZero: false,\n\t\tfillColor: \"#fd625e\"\n\t}\n};\nvar pointRadius = 2;\nvar margin = {\n\t\ttop: 50,\n\t\tright: 50,\n\t\tbottom: 50,\n\t\tleft: 160\n\t},\n\twidth = bizvizchart.getWidth() - margin.left - margin.right,\n\theight = bizvizchart.getHeight() - margin.top - margin.bottom;\nvar xMin = (field.hAxis.baseZero) ? 0 : d3.min(data, function(d) {\n\treturn d[field.hAxis.name] * 1\n});\n\nvar x = d3.scale.linear()\n\t.range([0, width])\n\t.domain([xMin, d3.max(data, function(d) {\n\t\treturn d[field.hAxis.name] * 1\n\t})])\n\t.nice();\n\nvar xAxis = d3.svg.axis()\n\t.scale(x)\n\t.orient(\"top\");\n\nvar x1Min = (field.h1Axis.baseZero) ? 0 : d3.min(data, function(d) {\n\treturn d[field.h1Axis.name] * 1\n});\nvar x1 = d3.scale.linear()\n\t.range([0, width])\n\t.domain([x1Min, d3.max(data, function(d) {\n\t\treturn d[field.h1Axis.name] * 1\n\t})])\n\t.nice();\n\nvar x1Axis = d3.svg.axis()\n\t.scale(x1)\n\t.orient(\"bottom\");\n\nvar yAxisLabel = d3.scale.ordinal()\n\t.domain(data.map(function(d) {\n\t\treturn d[field.catAxis.name]\n\t}))\n\t.rangeRoundBands([0, height], 0.2);\n\nvar y = d3.scale.ordinal()\n\t.rangeRoundBands([0, height], 0.2)\n\t.domain(data.map(function(d) {\n\t\treturn d[field.catAxis.name]\n\t}));\n\nvar yAxis = d3.svg.axis()\n\t.scale(yAxisLabel)\n\t.orient(\"left\");\n\nvar line = d3.svg.line()\n\t.x(function(d, i) {\n\t\treturn x1(d[field.h1Axis.name]) * 1\n\t})\n\t.y(function(d, i) {\n\t\treturn y(d[field.catAxis.name]) + pointRadius * 3;\n\t})\n\t.interpolate('linear');\n\nvar svg = d3.select(\"body\")\n\t.append(\"svg\")\n\t.attr(\"width\", width + margin.left + margin.right)\n\t.attr(\"height\", height + margin.top + margin.bottom)\n\t.append(\"g\")\n\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nsvg.append(\"g\")\n\t.attr(\"class\", \"y axis\")\n\t.call(yAxis);\n\nsvg.append(\"g\")\n\t.attr(\"class\", \"x axis\")\n\t.call(xAxis);\n\nsvg.append(\"g\")\n\t.attr(\"class\", \"x axis\")\n\t.attr(\"transform\", \"translate(0,\" + height + \")\")\n\t.call(x1Axis);\n\nsvg.append(\"g\")\n\t.attr(\"class\", \"y axis\")\n\t.append(\"line\")\n\t.attr(\"x1\", x(0))\n\t.attr(\"x2\", x(0))\n\t.attr(\"y2\", height);\n\nsvg.append(\"text\")\n\t.attr(\"class\", \"axisTitle\")\n\t.attr(\"text-anchor\", \"middle\")\n\t.attr(\"transform\", \"translate(\" + width / 2 + \",-30)\") // text is drawn off the screen top left, move down and out and rotate\n\t.text(\"Bar Axis\");\n\nsvg.append(\"text\")\n\t.attr(\"class\", \"axisTitle\")\n\t.attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n\t.attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height + 40) + \")\") // centre below axis\n\t.text(\"Line Axis\");\n\nsvg.append(\"a\")\n\t.attr(\"class\", \"d3Source\")\n\t.attr(\"xlink:href\", \"https://forums.databricks.com/questions/6679/d3js-horizontal-bar-combo-chart-dual-axes-align-y.html\")\n\t.attr(\"xlink:target\", \"_blank\")\n\t.attr(\"text-anchor\", \"right\") // this makes it easy to centre the text as the transform is applied to the anchor\n\t.attr(\"transform\", \"translate(\" + (width - 40) + \",\" + (height + 40) + \")\") // centre below axis\n\t.append(\"text\")\n\t.text(\"Source: D3\");\ntry {\n\tsvg.selectAll(\".bar\")\n\t\t.data(data)\n\t\t.enter()\n\t\t.append(\"rect\")\n\t\t.on(\"mouseover\", function(d, i) {\n\t\t\t/*\n\t\t\t//Data label\n\t\t\t\t\tvar xPosition = (parseFloat(d3.select(this)\n\t\t\t\t\t\t.attr(\"width\")) + 6);\n\t\t\t\t\tvar yPosition = parseFloat(d3.select(this)\n\t\t\t\t\t\t.attr(\"y\")) + (parseFloat(d3.select(this)\n\t\t\t\t\t\t.attr(\"height\")) / 2);\n\t\t\t\t\tsvg.append(\"text\")\n\t\t\t\t\t\t.attr(\"id\", \"tooltip\")\n\t\t\t\t\t\t.attr(\"x\", x(Math.min(0, d[field.hAxis.name])) + Math.abs(x(d[field.hAxis.name]) - x(0)) / 2)\n\t\t\t\t\t\t.attr(\"y\", y(d[field.catAxis.name]) + y.rangeBand() / 2)\n\t\t\t\t\t\t.attr(\"dy\", \"0.35em\")\n\t\t\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t\t\t.attr(\"font-size\", \"12px\")\n\t\t\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t\t\t\t.text(d[field.hAxis.name]);\n\t\t\t*/\n\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'block')\n\t\t\t\t.html(d[field.catAxis.name] + '<hr style=\"border:0.5px solid ' + field.hAxis.fillColor + '\"/>' + field.hAxis.name + ':' + d3.format(\",\")(d[field.hAxis.name]))\n\t\t\t\t.style('left', (d3.event.pageX - 34) + 'px')\n\t\t\t\t.style('top', (d3.event.pageY - 12) + 'px');\n\t\t})\n\t\t.on(\"mouseout\", function(d) {\n\t\t\t/*\n\t\t\t//Data label\n\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t.duration(250)\n\t\t\t\t\td3.select(\"#tooltip\")\n\t\t\t\t\t\t.remove();\n\t\t\t*/\n\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'none');\n\t\t})\n\t\t.on(\"click\", function(d, i) {\n\t\t\tbizvizchart.eventCallBack({\n\t\t\t\ttype: 'click'\n\t\t\t}, data[i], i);\n\t\t})\n\n\t\t.attr(\"x\", function(d) {\n\t\t\treturn x(Math.min(0, d[field.hAxis.name]));\n\t\t})\n\t\t.attr(\"y\", function(d) {\n\t\t\treturn y(d[field.catAxis.name]);\n\t\t})\n\t\t.attr(\"height\", y.rangeBand())\n\t\t.attr(\"width\", 0)\n\t\t.transition()\n\t\t.duration(500)\n\t\t.attr(\"width\", function(d) {\n\t\t\treturn Math.abs(x(d[field.hAxis.name]) - x(0));\n\t\t})\n\t\t.attr(\"fill\", field.hAxis.fillColor);\n} catch (e) {\n\tconsole.log(e);\n}\ntry {\n\tsvg.selectAll(\"dot\")\n\t\t.data(data)\n\t\t.enter()\n\t\t.append(\"circle\")\n\t\t.attr(\"r\", pointRadius)\n\t\t.attr(\"cx\", function(d) {\n\t\t\treturn x1(d[field.h1Axis.name]);\n\t\t})\n\t\t.attr(\"cy\", function(d) {\n\t\t\treturn y(d[field.catAxis.name]) + pointRadius * 3\n\t\t})\n\t\t.style(\"fill\", field.h1Axis.fillColor)\n\t\t.style(\"fill-opacity\", \"0.5\")\n\t\t.style(\"stroke\", field.h1Axis.fillColor)\n\t\t.style(\"stroke-width\", \"1.5\")\n\t\t.on(\"mouseover\", function(d, i) {\n\t\t\t//set up data to show on mouseover\n\t\t\t/* \n\t\t\t//Data label\n\t\t\t\t\tsvg.append(\"text\")\n\t\t\t\t\t\t.attr(\"id\", \"tooltip\")\n\t\t\t\t\t\t.attr(\"x\", x1(d[field.h1Axis.name]) - pointRadius * 4)\n\t\t\t\t\t\t.attr(\"y\", y(d[field.catAxis.name]) + pointRadius * 3)\n\t\t\t\t\t\t.attr(\"dy\", \"0.35em\")\n\t\t\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t\t\t.attr(\"font-size\", \"12px\")\n\t\t\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t\t\t.attr(\"fill\", field.h1Axis.fillColor)\n\t\t\t\t\t\t.text(d[field.h1Axis.name]);\n\t\t\t*/\n\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'block')\n\t\t\t\t.html(d[field.catAxis.name] + '<hr style=\"border:0.5px solid ' + field.h1Axis.fillColor + '\"/>' + field.h1Axis.name + ':' + d3.format(\",\")(d[field.h1Axis.name]))\n\t\t\t\t.style('left', (d3.event.pageX - 34) + 'px')\n\t\t\t\t.style('top', (d3.event.pageY - 12) + 'px');\n\n\t\t})\n\t\t.on(\"mouseout\", function(d) {\n\t\t\t/*\t\t\n\t\t\t//Data label\n\t\t\td3.select(this)\n\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t.duration(250)\n\t\t\t\t\td3.select(\"#tooltip\")\n\t\t\t\t\t\t.remove();\n\t\t\t*/\n\t\t\tvar div = d3.select('.tooltip')\n\t\t\t\t.style('display', 'none');\n\t\t})\n\t\t.on(\"click\", function(d, i) {\n\t\t\tbizvizchart.eventCallBack({\n\t\t\t\ttype: 'click'\n\t\t\t}, data[i], i);\n\t\t});\n} catch (e) {\n\tconsole.log(e);\n}\nsvg.append(\"svg:path\")\n\t.attr(\"d\", line(data))\n\t.attr(\"fill\", \"none\")\n\t.attr(\"stroke\", \"#fd625e\")\n\t.attr(\"stroke-linejoin\", \"round\")\n\t.attr(\"stroke-linecap\", \"round\")\n\t.attr(\"stroke-width\", 1);",
					"CSSContent": "body{\nfont-family: Arial;\n}\n.axis text ,\n.d3Source{\n  font-size: 10px;\n}\ntext, a {\nfill: #999999;\n}\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #999999;\n  shape-rendering: crispEdges;\n}\n.axisTitle{\nfont-size          : 12px;\n}\n\n  .tooltip{\ndisplay: none;\n      position      : absolute;\n      text-align    : center;\n      max-width     : 300px;\n      max-height    : 200px;\n      padding       : 8px;\n      border        : 1px solid #dddddd;\n      border-radius : 0px;\n      margin-top    : 30px;\n      font-size          : 12px;\n      background    : #FFFFFF;\n      color         : #000000;\n      pointer-events: none;\n  }",
					"HTMLContent": "<div class='tooltip'></div>",
					"Title": {
						"FontWeight": "600",
						"Description": "Dual Axis Bar Chart",
						"FontSize": "17",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#000000",
						"FontStyle": "normal",
						"showTitle": "true",
						"TitleBarHeight": "40"
					},
					"SubTitle": {
						"FontWeight": "normal",
						"Description": "SubTitle",
						"showSubTitle": "false",
						"FontSize": "15",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#808080",
						"FontStyle": "normal"
					}
				}
			}
		},
		"Fields": [{
				"DisplayName": "Year",
				"Type": "Category",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Year",
				"Color": "#fcdb96",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none"
			},
			{
				"DisplayName": "Expense",
				"Type": "Series",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Expense",
				"Color": "#fd940b",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none",
				"DataLabelCustomProperties": {
					"showDataLabel": "false",
					"useFieldColor": "false",
					"dataLabelTextAlign": "center",
					"dataLabelFontColor": "#000000",
					"dataLabelRotation": "0",
					"dataLabelFontSize": "14",
					"datalabelFontStyle": "normal",
					"datalabelFontWeight": "normal",
					"datalabelFontFamily": "BizvizFont",
					"datalabelField": "",
					"datalabelPosition": "Top",
					"dataLabelUseComponentFormater": "true",
					"datalabelFormaterUnit": "none",
					"datalabelFormaterPrecision": "default",
					"datalabelFormaterCurrency": "none",
					"datalabelFormaterPosition": "suffix"
				}
			}
		],
		"Data": [{
				"Year": 2016,
				"Expense": 14,
				"Revenue": 22,
				"Profit": 15
			},
			{
				"Year": 2017,
				"Expense": 28,
				"Revenue": 43,
				"Profit": 8
			},
			{
				"Year": 2018,
				"Expense": 31,
				"Revenue": 12,
				"Profit": 4
			}
		]
	}
}