{
	"CustomChart": {
		"Properties": {
			"Object": {
				"componentType": "custom_chart",
				"objectType": "chart",
				"subElement": "Chart",
				"themeType": "default-theme",
				"globalVariableKeyAttribute": "Globalkey",
				"isDataSetAvailable": "true",
				"enableScript": "true",
				"referenceID": "",
				"isValueFieldsAvailable": "false",
				"showContextMenu": "false",
				"shortName": "custom",
				"showLocked": "false",
				"objectName": "Custom_1",
				"unShowHidden": "false",
				"groupings": "",
				"percentheight": "320",
				"width": "643",
				"x": "20",
				"height": "536",
				"y": "10",
				"initialVisibility": "true",
				"percentwidth": "450",
				"objectID": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
				"Chart": {
					"id": "Obj.784241DDN8439NB566NF0C7N7BBDD306B14F",
					"Type": "CustomChart",
					"showGradient": "false",
					"bgGradients": "#f8f8f8",
					"bgAlpha": "1",
					"bgGradientRotation": "0",
					"exportToExcel": "true",
					"exportToCSV": "true",
					"exportToJPEG": "true",
					"exportToPNG": "true",
					"exportToPDF": "true",
					"exportToPPT": "true",
					"exportToPrint": "true",
					"showScreenShotButton": "true",
					"screenShotMode": "ppt",
					"pptServiceURL": "http://bdbizviz.com/PPT/Parser",
					"pptHeading": "Heading",
					"pptSubHeading": "Sub Heading",
					"subHeading": "Sub Heading",
					"scrnShotFileName": "exportDashboard",
					"showTooltip": "true",
					"tooltipBackgroundColor": "#FFFFFF",
					"tooltipBackgroundTransparency": "1",
					"tooltipBorderColor": "#E0DFDF",
					"customTooltipWidth": "auto",
					"tooltipPrecision": "default",
					"tooltipHighlighter": "true",
					"showMaximizeButton": "true",
					"showExcelDownload": "true",
					"showSubTitle": "false",
					"showTitle": "true",
					"GradientColor": "#F5F5F5,#F5F5F5",
					"showLegends": "false",
					"hideLegendOnStart": "true",
					"legendDirection": "horizontal",
					"legendfontSize": "10",
					"legendtextDecoration": "none",
					"legendfontStyle": "normal",
					"legendfontColor": "#000000",
					"legendfontFamily": "BizvizFont",
					"legendfontWeight": "normal",
					"legendbackgroundColor": "#ffffff",
					"legendbackgroundTransparency": "1",
					"showcheckboxwithlegend": "false",
					"showCheckboxSeprate": "false",
					"showBorder": "true",
					"borderColor": "#cccccc",
					"borderRadius": "5",
					"borderThickness": "1",
					"showShadow": "false",
					"shadowColor": "#cccccc",
					"shadowOpacity": "0.3",
					"markerColor": "#F5F5F5",
					"markerTransparency": "0.3",
					"showMarkerLine": true,
					"showVerticalMarkerLine": "false",
					"autoaxisSetup": "true",
					"minimumAxisValue": "-20",
					"maximumAxisValue": "110",
					"baseZero": "true",
					"zeroMarkerLine": "false",
					"zeroMarkerColor": "#be4a47",
					"FixedLabel": "false",
					"Formater": "Currency",
					"Unit": "none",
					"SignPosition": "prefix",
					"Precision": "default",
					"NumberFormatter": "none",
					"SecondaryFormater": "Number",
					"SecondaryUnit": "none",
					"Globalkey": "",
					"enableColorFromDrill": "false",
					"ChartType": "clustered",
					"ChartBase": "plane",
					"barWidth": "70",
							"JSPaths": [{
									"name": "",
									"src": "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"
								}, {
									"name": "",
									"src": "https://d3js.org/d3.v3.min.js"
								}
							],
							"CSSPaths": [],
							"JSContent": "(function () {\n\n\tvar w = bizvizchart.getWidth();\n\tvar h = bizvizchart.getHeight();\n\n\tvar keyc = true,\n\t\tkeys = true,\n\t\tkeyt = true,\n\t\tkeyr = true,\n\t\tkeyx = true,\n\t\tkeyd = true,\n\t\tkeyl = true,\n\t\tkeym = true,\n\t\tkeyh = true,\n\t\tkey1 = true,\n\t\tkey2 = true,\n\t\tkey3 = true,\n\t\tkey0 = true;\n\n\tvar focus_node = null,\n\t\thighlight_node = null;\n\n\tvar text_center = false;\n\tvar outline = false;\n\n\tvar min_score = 0;\n\tvar max_score = 1;\n\n\tvar color = d3.scale.linear()\n\t\t.domain([min_score, (min_score + max_score) / 2, max_score])\n\t\t.range([\"lime\", \"yellow\", \"red\"]);\n\n\tvar highlight_color = \"blue\";\n\tvar highlight_trans = 0.1;\n\n\tvar size = d3.scale.pow().exponent(1)\n\t\t.domain([1, 100])\n\t\t.range([8, 24]);\n\n\tvar force = d3.layout.force()\n\t\t.linkDistance(60)\n\t\t.charge(-300)\n\t\t.size([w, h]);\n// Define the div for the tooltip\nvar div = d3.select(\"body\").append(\"div\")\t\n    .attr(\"class\", \"graphtooltipdiv\")\t\t\t\t\n    .style(\"opacity\", 0);\n\t\n\tvar default_node_color = \"#ccc\";\n\tvar default_link_color = \"#888\";\n\tvar nominal_base_node_size = 8;\n\tvar nominal_text_size = 10;\n\tvar max_text_size = 24;\n\tvar nominal_stroke = 1.5;\n\tvar max_stroke = 4.5;\n\tvar max_base_node_size = 36;\n\tvar min_zoom = 0.1;\n\tvar max_zoom = 7;\n\tvar zoom = d3.behavior.zoom().scaleExtent([min_zoom, max_zoom]);\n\tvar svg = d3.select(\"body\").append(\"svg\");\n\tsvg.style(\"cursor\", \"move\");\n\tvar g = svg.append(\"g\");\n\n\tvar drawGraph = function (graph) {\n\t\tvar linkedByIndex = {};\n\t\tgraph.links.forEach(function (d) {\n\t\t\tlinkedByIndex[d.source + \",\" + d.target] = true;\n\t\t});\n\n\t\tfunction isConnected(a, b) {\n\t\t\treturn linkedByIndex[a.index + \",\" + b.index] || linkedByIndex[b.index + \",\" + a.index] || a.index == b.index;\n\t\t}\n\n\t\tfunction hasConnections(a) {\n\t\t\tfor (var property in linkedByIndex) {\n\t\t\t\ts = property.split(\",\");\n\t\t\t\tif ((s[0] == a.index || s[1] == a.index) && linkedByIndex[property])\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tforce\n\t\t\t.nodes(graph.nodes)\n\t\t\t.links(graph.links)\n\t\t\t.start();\n\n\t\tvar link = g.selectAll(\".link\")\n\t\t\t.data(graph.links)\n\t\t\t.enter().append(\"line\")\n\t\t\t.attr(\"class\", \"link\")\n\t\t\t.style(\"stroke-width\", nominal_stroke)\n\t\t\t.style(\"stroke\", function (d) {\n\t\t\t\tif (isNumber(d.score) && d.score >= 0)\n\t\t\t\t\treturn color(d.score);\n\t\t\t\telse\n\t\t\t\t\treturn default_link_color;\n\t\t\t})\n\n\t\tvar node = g.selectAll(\".node\")\n\t\t\t.data(graph.nodes)\n\t\t\t.enter().append(\"g\")\n\t\t\t.attr(\"class\", \"node\")\n\t\t\t.call(force.drag)\n\t\t\t\n\t\tnode.on(\"click\", function (d) {\n\t\t\tvar drillObj = {\n\t\t\t\tlabel: d.id,\n\t\t\t\tshape: d.type,\n\t\t\t\tsize: d.size,\n\t\t\t\tscore: d.score,\n\t\t\t\tid: d.index,\n\t\t\t\ttarget: \"\",\n\t\t\t\tnode_weight: d.weight\n\t\t\t}\n\t\t\tbizvizchart.eventCallBack({type:\"click\"},drillObj,d.index);\n\t\t});\n\t\tnode.on(\"dblclick.zoom\", function (d) {\n\t\t\td3.event.stopPropagation();\n\t\t\tvar dcx = (window.innerWidth / 2 - d.x * zoom.scale());\n\t\t\tvar dcy = (window.innerHeight / 2 - d.y * zoom.scale());\n\t\t\tzoom.translate([dcx, dcy]);\n\t\t\tg.attr(\"transform\", \"translate(\" + dcx + \",\" + dcy + \")scale(\" + zoom.scale() + \")\");\n\n\t\t});\n\n\t\tvar tocolor = \"fill\";\n\t\tvar towhite = \"stroke\";\n\t\tif (outline) {\n\t\t\ttocolor = \"stroke\"\n\t\t\ttowhite = \"fill\"\n\t\t}\n\n\t\tvar circle = node.append(\"path\")\n\n\t\t\t.attr(\"d\", d3.svg.symbol()\n\t\t\t\t.size(function (d) {\n\t\t\t\t\treturn Math.PI * Math.pow(size(d.size) || nominal_base_node_size, 2);\n\t\t\t\t})\n\t\t\t\t.type(function (d) {\n\t\t\t\t\treturn d.type;\n\t\t\t\t}))\n\n\t\t\t.style(tocolor, function (d) {\n\t\t\t\tif (isNumber(d.score) && d.score >= 0)\n\t\t\t\t\treturn color(d.score);\n\t\t\t\telse\n\t\t\t\t\treturn default_node_color;\n\t\t\t})\n\t\t\t//.attr(\"r\", function(d) { return size(d.size)||nominal_base_node_size; })\n\t\t\t.style(\"stroke-width\", nominal_stroke)\n\t\t\t.style(towhite, \"white\");\n\n\t\tvar text = g.selectAll(\".text\")\n\t\t\t.data(graph.nodes)\n\t\t\t.enter().append(\"text\")\n\t\t\t.attr(\"dy\", \".35em\")\n\t\t\t.style(\"font-size\", nominal_text_size + \"px\")\n\n\t\tif (text_center)\n\t\t\ttext.text(function (d) {\n\t\t\t\treturn d.id;\n\t\t\t})\n\t\t\t.style(\"text-anchor\", \"middle\");\n\t\telse\n\t\t\ttext.attr(\"dx\", function (d) {\n\t\t\t\treturn (size(d.size) || nominal_base_node_size);\n\t\t\t})\n\t\t\t.text(function (d) {\n\t\t\t\treturn '\\u2002' + d.id;\n\t\t\t});\n\n\t\tnode.on(\"mouseover\", function (d) {\n\t\t\t\tset_highlight(d);\n\t\t\t\tdiv.transition()\t\t\n                .duration(200)\t\t\n                .style(\"opacity\", 1);\t\t\n            div\t.html(\"<b>\"+d.id + \"</b><br/>\"  + \"Size: \"+d.size)\t\n                .style(\"left\", (d3.event.pageX + 10) + \"px\")\t\t\n                .style(\"top\", (d3.event.pageY - 30) + \"px\");\t\n\t\t\t})\n\t\t\t.on(\"mousedown\", function (d) {\n\t\t\t\td3.event.stopPropagation();\n\t\t\t\tfocus_node = d;\n\t\t\t\tset_focus(d)\n\t\t\t\tif (highlight_node === null)\n\t\t\t\t\tset_highlight(d)\n\n\t\t\t}).on(\"mouseout\", function (d) {\n\t\t\t\texit_highlight();\n\t\t\t\tdiv.transition()\t\t\n                .duration(400)\t\t\n                .style(\"opacity\", 0);\t\n\n\t\t\t});\n\n\t\td3.select(window).on(\"mouseup\",\n\t\t\tfunction () {\n\t\t\t\tif (focus_node !== null) {\n\t\t\t\t\tfocus_node = null;\n\t\t\t\t\tif (highlight_trans < 1) {\n\n\t\t\t\t\t\tcircle.style(\"opacity\", 1);\n\t\t\t\t\t\ttext.style(\"opacity\", 1);\n\t\t\t\t\t\tlink.style(\"opacity\", 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (highlight_node === null)\n\t\t\t\t\texit_highlight();\n\t\t\t});\n\n\t\tfunction exit_highlight() {\n\t\t\thighlight_node = null;\n\t\t\tif (focus_node === null) {\n\t\t\t\tsvg.style(\"cursor\", \"move\");\n\t\t\t\tif (highlight_color != \"white\") {\n\t\t\t\t\tcircle.style(towhite, \"white\");\n\t\t\t\t\ttext.style(\"font-weight\", \"normal\");\n\t\t\t\t\tlink.style(\"stroke\", function (o) {\n\t\t\t\t\t\treturn (isNumber(o.score) && o.score >= 0) ? color(o.score) : default_link_color\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tfunction set_focus(d) {\n\t\t\tif (highlight_trans < 1) {\n\t\t\t\tcircle.style(\"opacity\", function (o) {\n\t\t\t\t\treturn isConnected(d, o) ? 1 : highlight_trans;\n\t\t\t\t});\n\n\t\t\t\ttext.style(\"opacity\", function (o) {\n\t\t\t\t\treturn isConnected(d, o) ? 1 : highlight_trans;\n\t\t\t\t});\n\n\t\t\t\tlink.style(\"opacity\", function (o) {\n\t\t\t\t\treturn o.source.index == d.index || o.target.index == d.index ? 1 : highlight_trans;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction set_highlight(d) {\n\t\t\tsvg.style(\"cursor\", \"pointer\");\n\t\t\tif (focus_node !== null)\n\t\t\t\td = focus_node;\n\t\t\thighlight_node = d;\n\n\t\t\tif (highlight_color != \"white\") {\n\t\t\t\tcircle.style(towhite, function (o) {\n\t\t\t\t\treturn isConnected(d, o) ? highlight_color : \"white\";\n\t\t\t\t});\n\t\t\t\ttext.style(\"font-weight\", function (o) {\n\t\t\t\t\treturn isConnected(d, o) ? \"bold\" : \"normal\";\n\t\t\t\t});\n\t\t\t\tlink.style(\"stroke\", function (o) {\n\t\t\t\t\treturn o.source.index == d.index || o.target.index == d.index ? highlight_color : ((isNumber(o.score) && o.score >= 0) ? color(o.score) : default_link_color);\n\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tzoom.on(\"zoom\", function () {\n\n\t\t\tvar stroke = nominal_stroke;\n\t\t\tif (nominal_stroke * zoom.scale() > max_stroke)\n\t\t\t\tstroke = max_stroke / zoom.scale();\n\t\t\tlink.style(\"stroke-width\", stroke);\n\t\t\tcircle.style(\"stroke-width\", stroke);\n\n\t\t\tvar base_radius = nominal_base_node_size;\n\t\t\tif (nominal_base_node_size * zoom.scale() > max_base_node_size)\n\t\t\t\tbase_radius = max_base_node_size / zoom.scale();\n\t\t\tcircle.attr(\"d\", d3.svg.symbol()\n\t\t\t\t.size(function (d) {\n\t\t\t\t\treturn Math.PI * Math.pow(size(d.size) * base_radius / nominal_base_node_size || base_radius, 2);\n\t\t\t\t})\n\t\t\t\t.type(function (d) {\n\t\t\t\t\treturn d.type;\n\t\t\t\t}))\n\n\t\t\t//circle.attr(\"r\", function(d) { return (size(d.size)*base_radius/nominal_base_node_size||base_radius); })\n\t\t\tif (!text_center)\n\t\t\t\ttext.attr(\"dx\", function (d) {\n\t\t\t\t\treturn (size(d.size) * base_radius / nominal_base_node_size || base_radius);\n\t\t\t\t});\n\n\t\t\tvar text_size = nominal_text_size;\n\t\t\tif (nominal_text_size * zoom.scale() > max_text_size)\n\t\t\t\ttext_size = max_text_size / zoom.scale();\n\t\t\ttext.style(\"font-size\", text_size + \"px\");\n\n\t\t\tg.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \")\");\n\t\t});\n\n\t\tsvg.call(zoom);\n\n\t\tresize();\n\t\t//window.focus();\n\t\td3.select(window).on(\"resize\", resize).on(\"keydown\", keydown);\n\n\t\tforce.on(\"tick\", function () {\n\n\t\t\tnode.attr(\"transform\", function (d) {\n\t\t\t\treturn \"translate(\" + d.x + \",\" + d.y + \")\";\n\t\t\t});\n\t\t\ttext.attr(\"transform\", function (d) {\n\t\t\t\treturn \"translate(\" + d.x + \",\" + d.y + \")\";\n\t\t\t});\n\n\t\t\tlink.attr(\"x1\", function (d) {\n\t\t\t\t\treturn d.source.x;\n\t\t\t\t})\n\t\t\t\t.attr(\"y1\", function (d) {\n\t\t\t\t\treturn d.source.y;\n\t\t\t\t})\n\t\t\t\t.attr(\"x2\", function (d) {\n\t\t\t\t\treturn d.target.x;\n\t\t\t\t})\n\t\t\t\t.attr(\"y2\", function (d) {\n\t\t\t\t\treturn d.target.y;\n\t\t\t\t});\n\n\t\t\tnode.attr(\"cx\", function (d) {\n\t\t\t\t\treturn d.x;\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", function (d) {\n\t\t\t\t\treturn d.y;\n\t\t\t\t});\n\t\t});\n\n\t\tfunction resize() {\n\t\t\tvar width = window.innerWidth,\n\t\t\t\theight = window.innerHeight;\n\t\t\tsvg.attr(\"width\", width).attr(\"height\", height);\n\n\t\t\tforce.size([force.size()[0] + (width - w) / zoom.scale(), force.size()[1] + (height - h) / zoom.scale()]).resume();\n\t\t\tw = width;\n\t\t\th = height;\n\t\t}\n\n\t\tfunction keydown() {\n\t\t\tif (d3.event.keyCode == 32) {\n\t\t\t\tforce.stop();\n\t\t\t} else if (d3.event.keyCode >= 48 && d3.event.keyCode <= 90 && !d3.event.ctrlKey && !d3.event.altKey && !d3.event.metaKey) {\n\t\t\t\tswitch (String.fromCharCode(d3.event.keyCode)) {\n\t\t\t\t\tcase \"C\":\n\t\t\t\t\t\tkeyc = !keyc;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"S\":\n\t\t\t\t\t\tkeys = !keys;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"T\":\n\t\t\t\t\t\tkeyt = !keyt;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"R\":\n\t\t\t\t\t\tkeyr = !keyr;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\tkeyx = !keyx;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"D\":\n\t\t\t\t\t\tkeyd = !keyd;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"L\":\n\t\t\t\t\t\tkeyl = !keyl;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"M\":\n\t\t\t\t\t\tkeym = !keym;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"H\":\n\t\t\t\t\t\tkeyh = !keyh;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"1\":\n\t\t\t\t\t\tkey1 = !key1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"2\":\n\t\t\t\t\t\tkey2 = !key2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"3\":\n\t\t\t\t\t\tkey3 = !key3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"0\":\n\t\t\t\t\t\tkey0 = !key0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlink.style(\"display\", function (d) {\n\t\t\t\t\tvar flag = vis_by_type(d.source.type) && vis_by_type(d.target.type) && vis_by_node_score(d.source.score) && vis_by_node_score(d.target.score) && vis_by_link_score(d.score);\n\t\t\t\t\tlinkedByIndex[d.source.index + \",\" + d.target.index] = flag;\n\t\t\t\t\treturn flag ? \"inline\" : \"none\";\n\t\t\t\t});\n\t\t\t\tnode.style(\"display\", function (d) {\n\t\t\t\t\treturn (key0 || hasConnections(d)) && vis_by_type(d.type) && vis_by_node_score(d.score) ? \"inline\" : \"none\";\n\t\t\t\t});\n\t\t\t\ttext.style(\"display\", function (d) {\n\t\t\t\t\treturn (key0 || hasConnections(d)) && vis_by_type(d.type) && vis_by_node_score(d.score) ? \"inline\" : \"none\";\n\t\t\t\t});\n\n\t\t\t\tif (highlight_node !== null) {\n\t\t\t\t\tif ((key0 || hasConnections(highlight_node)) && vis_by_type(highlight_node.type) && vis_by_node_score(highlight_node.score)) {\n\t\t\t\t\t\tif (focus_node !== null)\n\t\t\t\t\t\t\tset_focus(focus_node);\n\t\t\t\t\t\tset_highlight(highlight_node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texit_highlight();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t};\n\n\tvar vis_by_type = function (type) {\n\t\tswitch (type) {\n\t\t\tcase \"circle\":\n\t\t\t\treturn keyc;\n\t\t\tcase \"square\":\n\t\t\t\treturn keys;\n\t\t\tcase \"triangle-up\":\n\t\t\t\treturn keyt;\n\t\t\tcase \"diamond\":\n\t\t\t\treturn keyr;\n\t\t\tcase \"cross\":\n\t\t\t\treturn keyx;\n\t\t\tcase \"triangle-down\":\n\t\t\t\treturn keyd;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}\n\tvar vis_by_node_score = function (score) {\n\t\tif (isNumber(score)) {\n\t\t\tif (score >= 0.666)\n\t\t\t\treturn keyh;\n\t\t\telse if (score >= 0.333)\n\t\t\t\treturn keym;\n\t\t\telse if (score >= 0)\n\t\t\t\treturn keyl;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar vis_by_link_score = function (score) {\n\t\tif (isNumber(score)) {\n\t\t\tif (score >= 0.666)\n\t\t\t\treturn key3;\n\t\t\telse if (score >= 0.333)\n\t\t\t\treturn key2;\n\t\t\telse if (score >= 0)\n\t\t\t\treturn key1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar isNumber = function (n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t}\n\n\tvar gdata = {\n\t\t\"graph\": [],\n\t\t\"links\": [],\n\t\t\"nodes\": [],\n\t\t\"directed\": false,\n\t\t\"multigraph\": false\n\t};\n\tvar cData = bizvizchart.getData();\n\tfor(var i=0; i<cData.length; i++){\n\t\tvar targets = ((cData[i].target !== \"\" && cData[i].target != \"null\") ? cData[i].target.split(\",\") : []);\n\t\tfor(var j=0; j<targets.length; j++){\n\t\t\tvar link = {\n\t\t\t\tsource: i*1,\n\t\t\t\ttarget: targets[j]*1\n\t\t\t};\n\t\t\tgdata[\"links\"].push(link);\n\t\t}\n\t\tvar node = {\n\t\t\tid: cData[i].label,\n\t\t\ttype: cData[i].shape,\n\t\t\tsize: cData[i].size,\n\t\t\tscore: cData[i].score\n\t\t};\n\t\tgdata[\"nodes\"].push(node);\n\t}\n\tdrawGraph(gdata);\n}());",
							"CSSContent": ".graphtooltipdiv{\t\n    position: absolute;\t\t\t\n    width: auto;\t\t\t\t\t\n    height: auto;\t\t\t\t\t\n    padding: 5px;\nfont-size: 12px;\nfont-family:inherit;\t\t\t\t\n    background: #fff;\t\n    border: 1px solid #ccc;\t\t\n    border-radius: 4px;\t\t\t\n    pointer-events: none;\t\t\t\n}",
							"HTMLContent": "",
					"Title": {
						"FontWeight": "600",
						"Description": "Network Graph",
						"FontSize": "17",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#000000",
						"FontStyle": "normal",
						"showTitle": "true",
						"TitleBarHeight": "40"
					},
					"SubTitle": {
						"FontWeight": "normal",
						"Description": "SubTitle",
						"showSubTitle": "false",
						"FontSize": "15",
						"TextDecoration": "none",
						"Align": "left",
						"FontFamily": "BizvizFont",
						"FontColor": "#808080",
						"FontStyle": "normal"
					}
				}
			}
		},
		"Fields": [{
				"DisplayName": "Year",
				"Type": "Category",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Year",
				"Color": "#fcdb96",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none"
			},
			{
				"DisplayName": "Expense",
				"Type": "Series",
				"visible": "true",
				"PlotRadius": "0",
				"Name": "Expense",
				"Color": "#fd940b",
				"axis": "none",
				"Precision": "0",
				"ChartType": "none",
				"DataLabelCustomProperties": {
					"showDataLabel": "false",
					"useFieldColor": "false",
					"dataLabelTextAlign": "center",
					"dataLabelFontColor": "#000000",
					"dataLabelRotation": "0",
					"dataLabelFontSize": "14",
					"datalabelFontStyle": "normal",
					"datalabelFontWeight": "normal",
					"datalabelFontFamily": "BizvizFont",
					"datalabelField": "",
					"datalabelPosition": "Top",
					"dataLabelUseComponentFormater": "true",
					"datalabelFormaterUnit": "none",
					"datalabelFormaterPrecision": "default",
					"datalabelFormaterCurrency": "none",
					"datalabelFormaterPosition": "suffix"
				}
			}
		],
		"Data": [{
				"Year": 2016,
				"Expense": 14,
				"Revenue": 22,
				"Profit": 15
			},
			{
				"Year": 2017,
				"Expense": 28,
				"Revenue": 43,
				"Profit": 8
			},
			{
				"Year": 2018,
				"Expense": 31,
				"Revenue": 12,
				"Profit": 4
			}
		]
	}
}